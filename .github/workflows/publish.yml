name: Publish
on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  calculate-version:
    name: Calculate Version
    runs-on: windows-latest
    outputs:
      AssemblySemVer: ${{ steps.gitversion.outputs.AssemblySemVer }}
      AssemblySemFileVer: ${{ steps.gitversion.outputs.AssemblySemFileVer }}
      InformationalVersion: ${{ steps.gitversion.outputs.InformationalVersion }}
      NuGetVersionV2: ${{ steps.gitversion.outputs.NuGetVersionV2 }}
      SemVer: ${{ steps.gitversion.outputs.SemVer }}
      PreReleaseTag: ${{ steps.gitversion.outputs.PreReleaseTag }}
      Sha: ${{ steps.gitversion.outputs.Sha }}
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@main
      with:
        versionSpec: '5.x'
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@main
  publishupdater:
    runs-on: windows-latest
    needs: calculate-version
    env:
      AssemblySemVer: ${{ needs.calculate-version.outputs.AssemblySemVer }}
      AssemblySemFileVer: ${{ needs.calculate-version.outputs.AssemblySemFileVer }}
      InformationalVersion: ${{ needs.calculate-version.outputs.InformationalVersion }}
      NuGetVersionV2: ${{ needs.calculate-version.outputs.NuGetVersionV2 }}
      SemVer: ${{ needs.calculate-version.outputs.SemVer }}
      Sha: ${{ needs.calculate-version.outputs.Sha }}
      PlatformTarget: ''
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: ${{ env.Sha }}
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@main
      with:
        dotnet-version: '8.x.x'
    - name: Pack
      run: dotnet pack ClientUpdater\ClientUpdater.csproj -p:AssemblyVersion=$env:GitVersion_AssemblySemVer -p:FileVersion=$env:GitVersion_AssemblySemFileVer -p:InformationalVersion=$env:GitVersion_InformationalVersion -p:PackageVersion=$env:GitVersion_NuGetVersionV2
    - name: Upload Artifacts
      uses: actions/upload-artifact@main
      with:
        path: ClientUpdater\bin\*\*.*nupkg
        if-no-files-found: error
  publishsecondstagehupdater:
    runs-on: windows-latest
    needs: calculate-version
    env:
      AssemblySemVer: ${{ needs.calculate-version.outputs.AssemblySemVer }}
      AssemblySemFileVer: ${{ needs.calculate-version.outputs.AssemblySemFileVer }}
      InformationalVersion: ${{ needs.calculate-version.outputs.InformationalVersion }}
      NuGetVersionV2: ${{ needs.calculate-version.outputs.NuGetVersionV2 }}
      SemVer: ${{ needs.calculate-version.outputs.SemVer }}
      Sha: ${{ needs.calculate-version.outputs.Sha }}
      PlatformTarget: ''
    strategy:
      matrix:
        framework: [net8.0, net7.0]
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: ${{ env.Sha }}
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@main
      with:
        dotnet-version: '8.x.x'
    - name: Publish
      run: dotnet publish SecondStageUpdater/SecondStageUpdater.csproj -p:DebugType=embedded -f ${{ matrix.framework }} -p:AssemblyVersion=$env:GitVersion_AssemblySemVer -p:FileVersion=$env:GitVersion_AssemblySemFileVer -p:InformationalVersion=$env:GitVersion_InformationalVersion
    - name: Zip
      run: 7z a -r ${{ format('SecondStageUpdater-v{0}-{1}.zip', env.GitVersion_SemVer, matrix.framework) }} ./SecondStageUpdater/bin/Release/${{ matrix.framework }}/publish/*.*
    - name: Upload Artifacts
      uses: actions/upload-artifact@main
      with:
        path: *.zip
        if-no-files-found: error
  release:
    needs: [calculate-version, publishupdater, publishsecondstagehupdater]
    env:
      PreReleaseTag: ${{ needs.calculate-version.outputs.PreReleaseTag }}
      SemVer: ${{ needs.calculate-version.outputs.SemVer }}
      Sha: ${{ needs.calculate-version.outputs.Sha }}
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        ref: ${{ env.Sha }}
    - name: Download Artifacts
      uses: actions/download-artifact@main
    - name: List
      run: Get-ChildItem -Recurse
    - name: Release
      run: gh release create v${{ env.SemVer }} (Get-Item artifact\*\*.*) --generate-notes --target ${{ env.Sha }} ${{ env.PreReleaseTag != '' && '--prerelease' || '' }}
      env:
        GH_TOKEN: ${{ github.token }}